import numpy as np


def parse_obj_data(obj_data):
    vertices = []
    normals = []
    faces = []

    for line in obj_data.splitlines():
        line = line.strip()

        if line.startswith("v "):
            parts = line.split()
            vertices.append([float(parts[1]), float(parts[2]), float(parts[3])])

        elif line.startswith("vn "):
            parts = line.split()
            normals.append([float(parts[1]), float(parts[2]), float(parts[3])])

        elif line.startswith("f "):
            parts = line.split()
            face_vertices = []
            face_normals = []

            for part in parts[1:]:
                v_n = part.split("//")
                vertex_index = int(v_n[0]) - 1  # Convert to 0-based index
                normal_index = int(v_n[1]) - 1  # Convert to 0-based index
                face_vertices.append(vertex_index)
                face_normals.append(normal_index)

            faces.append((face_vertices, face_normals))

    return vertices, normals, faces


def reorder_faces_counterclockwise(vertices, faces):
    # ccw vertex ordering for normal vectors left-hand rule
    def cross_product(v1, v2, v3):
        edge1 = np.array(v2) - np.array(v1)
        edge2 = np.array(v3) - np.array(v1)
        return np.cross(edge1, edge2)

    def is_counterclockwise(v1, v2, v3):
        cp = cross_product(v1, v2, v3)
        return cp[2] > 0  # Z component should be positive for ccw

    ordered_faces = []
    for face in faces:
        face_vertices = face[0]
        v1, v2, v3 = (
            vertices[face_vertices[0]],
            vertices[face_vertices[1]],
            vertices[face_vertices[2]],
        )

        # reverse if not ccw
        if is_counterclockwise(v1, v2, v3):
            ordered_faces.append(face)
        else:
            ordered_faces.append((face_vertices[::-1], face[1][::-1]))

    return ordered_faces


def format_obj_data(vertices, normals, faces):
    vertex_strs = [f"Coordinate({v[0]}, {v[1]}, {v[2]}), " for v in vertices]
    face_strs = []

    for i, face in enumerate(faces):
        face_str = "("
        for vertex_index, normal_index in zip(face[0], face[1]):
            face_str += f"{vertex_index}, "
        face_str += f"), # Face {i}"
        face_strs.append(face_str.strip())

    return "[" + "\n".join(face_strs) + "\n], [" + "\n".join(vertex_strs) + "],"


def main():
    obj_data = """
    # OBJ generated by ONSHAPE BY PTC INC, 1.191 Units = meters 
mtllib Part Studio 3.mtl
g Part 1
v 0.348057 0.286962 -1 
v 0.348057 0.450312 -1 
v 0.348057 0.450312 -0.768039 
v 0.348057 0.286962 -0.768039 
v 0.59672 0.286962 -0.768039 
v 0.59672 0.286962 -1 
v 0.59672 0.450312 -0.768039 
v 0.59672 0.450312 -1 
v 1 0.45 -1 
v 1 0 -1 
v 0.7 0.75 -1 
v -2.22045e-16 0 -1 
v -2.22045e-16 0.75 -1 
v 0 0.75 0 
v 0.7 0.75 0 
v 1 0 0 
v 0 0 0 
v 0.868027 0.581973 -0.768039 
v 0 0.581973 -0.768039 
v 0 0.162692 -0.768039 
v 1 0.162692 -0.768039 
v 1 0.45 -0.768039 
v 0 0.162692 -0.194772 
v 0 0.581973 -0.194772 
v 1 0.45 0 
v 1 0.162692 -0.194772 
v 1 0.45 -0.194772 
v 0.868027 0.581973 -0.194772 
v 0.348057 0.286962 0 
v 0.348057 0.450312 0 
v 0.59672 0.286962 0 
v 0.59672 0.450312 0 
v 0.348057 0.450312 -0.194772 
v 0.59672 0.450312 -0.194772 
v 0.59672 0.286962 -0.194772 
v 0.348057 0.286962 -0.194772 
vn 1 0 0 
vn 0 1 0 
vn -1 0 0 
vn 0 -1 0 
vn 0 0 -1 
vn 0 1 0 
vn 0 -1 0 
vn 0 0 1 
vn -1 0 0 
vn 1 0 0 
vn 0.707107 0.707107 0 
vn 0 1 0 
vn 0 -1 0 
vn 0 0 1 
vn 0 0 -1 
vn 1 0 0 
vn 0 1 0 
vn -1 0 0 
vn 0 -1 0 
usemtl 0.615686_0.811765_0.929412_0.000000_0.000000
o mesh0
f 1//1 2//1 3//1 
f 3//1 4//1 1//1 
o mesh1
f 1//2 4//2 5//2 
f 5//2 6//2 1//2 
o mesh2
f 6//3 5//3 7//3 
f 7//3 8//3 6//3 
o mesh3
f 2//4 8//4 7//4 
f 7//4 3//4 2//4 
o mesh4
f 9//5 10//5 6//5 
f 11//5 8//5 2//5 
f 6//5 8//5 9//5 
f 8//5 11//5 9//5 
f 12//5 1//5 6//5 
f 6//5 10//5 12//5 
f 12//5 13//5 2//5 
f 2//5 1//5 12//5 
f 2//5 13//5 11//5 
o mesh5
f 11//6 13//6 14//6 
f 14//6 15//6 11//6 
o mesh6
f 10//7 16//7 17//7 
f 17//7 12//7 10//7 
o mesh7
f 18//8 19//8 3//8 
f 20//8 4//8 3//8 
f 3//8 19//8 20//8 
f 20//8 21//8 5//8 
f 22//8 18//8 7//8 
f 5//8 4//8 20//8 
f 5//8 21//8 22//8 
f 7//8 5//8 22//8 
f 3//8 7//8 18//8 
o mesh8
f 14//9 13//9 19//9 
f 12//9 20//9 19//9 
f 17//9 23//9 20//9 
f 17//9 14//9 24//9 
f 19//9 13//9 12//9 
f 24//9 23//9 17//9 
f 20//9 12//9 17//9 
f 19//9 24//9 14//9 
o mesh9
f 25//10 16//10 26//10 
f 16//10 10//10 21//10 
f 21//10 26//10 16//10 
f 9//10 22//10 21//10 
f 21//10 10//10 9//10 
f 26//10 27//10 25//10 
o mesh10
f 15//11 28//11 18//11 
f 25//11 27//11 28//11 
f 9//11 11//11 18//11 
f 28//11 15//11 25//11 
f 18//11 11//11 15//11 
f 18//11 22//11 9//11 
o mesh11
f 26//12 21//12 20//12 
f 20//12 23//12 26//12 
o mesh12
f 18//13 28//13 24//13 
f 24//13 19//13 18//13 
o mesh13
f 17//14 29//14 30//14 
f 17//14 16//14 31//14 
f 25//14 32//14 31//14 
f 31//14 29//14 17//14 
f 25//14 15//14 32//14 
f 15//14 14//14 30//14 
f 31//14 16//14 25//14 
f 30//14 14//14 17//14 
f 30//14 32//14 15//14 
o mesh14
f 23//15 24//15 33//15 
f 28//15 34//15 33//15 
f 27//15 35//15 34//15 
f 33//15 24//15 28//15 
f 34//15 28//15 27//15 
f 27//15 26//15 35//15 
f 23//15 36//15 35//15 
f 35//15 26//15 23//15 
f 33//15 36//15 23//15 
o mesh15
f 29//16 36//16 33//16 
f 33//16 30//16 29//16 
o mesh16
f 29//17 31//17 35//17 
f 35//17 36//17 29//17 
o mesh17
f 31//18 32//18 34//18 
f 34//18 35//18 31//18 
o mesh18
f 30//19 33//19 34//19 
f 34//19 32//19 30//19 



    """

    # Step 1: Parse the OBJ data
    vertices, normals, faces = parse_obj_data(obj_data)

    # Step 2: Reorder the faces to ccw winding order
    ordered_faces = reorder_faces_counterclockwise(vertices, faces)

    # Step 3: Format as string
    formatted_obj_data = format_obj_data(vertices, normals, ordered_faces)

    # Output data
    print(formatted_obj_data)


if __name__ == "__main__":
    main()
